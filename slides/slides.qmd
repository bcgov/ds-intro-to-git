---
title: "Version Control using Git + GitHub"
subtitle: "BC Stats Workshop"
date: 01/29/2025
date-format: long
title-slide-attributes: 
  data-notes: Good morning, everyone! Welcome, and thank you for taking the time to join us today. I’m really excited to have the opportunity to share this workshop with you and explore Version Control, git and GitHub together.
format:
    revealjs: 
        slide-number: true
        chalkboard: 
          buttons: false
        preview-links: auto
        #logo: images/quarto.png
        theme: [white, custom.scss]
---


## Territorial Acknowledgement

![](/figures/section-1-vc/mystic-beach-vi.jpg)

::: footer
Photo Source: [Mystic Beach, Vancouver Island, Canada 10](https://commons.wikimedia.org/wiki/File:Mystic_Beach,_Vancouver_Island,_Canada_10.jpg) © [Michal Klajban](https://commons.wikimedia.org/wiki/User:Podzemnik), [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0).

:::

::: notes
Let's start with our territorial acknowledgement.  I acknowledge with respect the Coast Salish Peoples on whose traditional lands and waterways we live, learn and play. I are grateful for the opportunity to share in this beautiful region, and I aspire to healthy and respectful relationships with those who have lived on and cared for these lands for millennia.

:::

## Housekeeping

:::: columns

::: {.column width="40%"}
![](/figures/section-1-vc/housekeeping.png){fig-pos="t" width="75%"}

:::

::: {.column width="60%" .incremental} 
- Live coding event: (not being recorded)
- Best practices for learning virtually
  - What to do with questions?
  - Microphones on mute
  - Getting disconnected
  - Cameras on at first.
- Our request: try your best
- Our presenters: all kinds of awesome
- Course Materials

:::

::::

::: footer
Course Materials: <https://bcgov.github.io/ds-intro-to-git>

:::

::: notes
As part of today’s workshop, we’ll be coding in real time, working through concepts together on the fly. This approach lets us explore the process interactively. While this can be dynamic and fun, it also means there may be moments where we need to debug or adjust as we go. 

Since we’ll be coding in real time, it’s important that everyone feels comfortable and engaged. To keep things running smoothly in our virtual setting, let’s go over a few best practices:

If you have questions, please feel free to drop them in the chat or use the ‘raise hand’ feature—we’ll address them as we go.  Your engagement and questions will make this experience even more valuable, so don’t hesitate to share your thoughts along the way!
Keep your microphones on mute unless speaking to minimize background noise. 
And if we get disconnected, don’t worry! You can rejoin using the same meeting link, and Lindsay will let you back in.
Cameras on for the first bit so the faciliators get to know who you are and can put a face to a name.  

These simple steps will help ensure we all get the most out of today’s session, so let’s dive in!

The link to the course materials was sent with the pre-workshop assignment and installation instructions.  For your convenience the link is at the bottom of the slide.

:::

## Workshop Code of Conduct

::: {.incremental} 
-   We aim to make this a welcoming and supportive environment for everyone, regardless of background
-   We encourage respectful discussion and questions throughout the course
-   Please be fully present and engaged during the session (that email can wait!)
:::

::: footer
Learn more: [Standards of Conduct for BC Public Service employees](https://www2.gov.bc.ca/gov/content/careers-myhr/about-the-bc-public-service/ethics-standards-of-conduct/standards-of-conduct)

:::

::: notes

Before we begin, I’d like to take a moment to outline our workshop code of conduct. These guidelines are in place to ensure this session remains a positive and productive space for everyone:

First and foremost, we aim to create a welcoming and supportive environment for all participants, regardless of background.
We encourage respectful discussion and questions throughout the session. Healthy dialogue enriches the learning experience, but it’s important to maintain a tone of mutual respect as teaching and learning in a virtual environment can be hard.
Finally, we ask that you be fully present and engaged during the workshop. Multitasking can wait—this is your opportunity to focus and get the most out of our time together.

By following these principles, we can create a space where everyone feels comfortable and valued. Thanks in advance for your cooperation.

:::

## Workshop Outline

::::: {.columns}

::: {.column width="75%"}

::: {.fragment}

::: {.incremental} 
- Section 1: What is version control for code
  - Why do we want to use it?
- Section 2: Working locally with Git
  - Setting up our first Git repository 
- Section 3: Remote code-hosting and GitHub: 
  - Sharing code on GitHub 
- Section 4: BCGov GitHub Organization
  - Coding in the open 
:::

:::

:::

::: {.column width="25%"}

::: {.fragment}
  ![](/figures/section-1-vc/version-control.png){fig-pos="H" width="25%"}
<br>
  ![](/figures/section-2-git/git-logo.png){fig-pos="H" width="30%"}
<br>
<br>
  ![](/figures/section-3-github/github-mark.png){fig-pos="H" width="25%"}
<br>
<br>
  ![](/figures/section-4-bcgov/bcgov-logo.png){fig-pos="H" width="25%"}

:::

:::

:::::

::: footer
Course Materials: <https://bcgov.github.io/ds-intro-to-git>

:::

::: notes
To give you a clear picture of what we’ll be covering today, here’s an outline of our workshop:

Section 1: What is Version Control for Code
We’ll start by exploring the concept of version control: what it is and why it’s an essential practice in modern coding.

Section 2: Working Locally with Git
Next, we’ll dive into Git, learning how to set up and work with our first Git repository.

Section 3: Remote Code-Hosting and GitHub
In this section, we’ll focus on using GitHub to share and collaborate on code.

Section 4: BCGov GitHub Organization
Finally, we’ll discuss coding in the open, leveraging the BCGov GitHub organization to manage and share projects effectively.

This structured approach will guide us step-by-step from foundational concepts to practical applications, ensuring you gain both understanding and hands-on experience.

:::

## Installation & Set Up Review

::: {.incremental} 
-   Installed Git (includes Git Bash): <https://git-scm.com/download/win>
-   Configured Git: [steps here](https://bcgov.github.io/ds-intro-to-git/pre-workshop/software-install.html#configure-git)
-   Created a [GitHub account](https://bcgov.github.io/ds-intro-to-git/pre-workshop/software-install.html#create-your-github-account)
    -   Set-up 2MFA
    -   Created a Personal Access Token
:::

::: footer
Learn more: [Software Installation Guide](https://bcgov.github.io/ds-intro-to-git/pre-workshop/software-install.html)

:::

::: notes
Before diving into today’s workshop, let’s quickly review the foundational steps you’ve already completed in preparation

Installed Git (including Git Bash): You’ve downloaded and installed Git from git-scm.com. This included Git Bash, a terminal that allows you to interact with Git through command-line commands.

Configured Git: You configured Git by setting up your username and email address, which ensures that every change you commit is associated with your identity. If you need a refresher, the configuration steps can be found here.

Created a GitHub Account: You set up a GitHub account, which will allow you to store and collaborate on code projects in a cloud-based repository. As part of this process you enabled Two-Factor Authentication (2MFA) to enhance account security. You also created a Personal Access Token to allow Git to authenticate securely with your GitHub account for operations like pushing or pulling code.

These steps provided the groundwork for today’s workshop, ensuring you have the tools and configurations necessary to follow along effectively. If you encounter any challenges related to these steps, feel free to drop a question into the chat for assistance.

You will also have configured your email and user name so that git can connect to GitHub. Most of you did this in Git Bash terminal.

Question for Bonnie: do we want to check configuration at some point?

:::

## Section 1: What is Version Control? {background-image="/figures/section-1-vc/version-control.png" background-size="6%" background-position="85% 6%"}

![](/figures/section-1-vc/cartoon1.png){fig-pos="t" fig-align="center"}

::: footer
Source: [notFinal.doc](https://phdcomics.com/comics.php?f=1531) by Jorge Cham © 2012

:::

::: notes
Not this.  But we’ve all been in this situation before: it seems unnecessary to have multiple nearly-identical versions of the same document – either by yourself or spread around among colleagues. It’s difficult to tell the difference between files, and what was changed when, by whom, and why?

Version control is the practice of tracking and managing changes to software code. Version control systems are software tools that are used to help teams manage changes to code/documents over time.

Consider the following scenario. You and your colleagues have been asked to do an analysis of the Work Environment Survey study to determine if workplace satisfaction has increased or decreased significantly since the start of the pandemic. You and your colleagues want to be able to work on the project at the same time, but have run into problems doing this in the past. If you take turns, each of you will spend a lot of time waiting for the other to finish, but if you work on your own copies and save them to the local network, things will be lost, overwritten, or duplicated. A colleague suggests using version control to manage your work.

:::


## Changes saved sequentially {background-image="/figures/section-1-vc/version-control.png" background-size="6%" background-position="85% 6%"}

![](/figures/section-2-git/sequential.png){fig-pos="H"}

::: notes
Git keeps track of snapshots in time – each document or file starts with a base version and then you tell git to save just the changes you made at each step of the way.

You decide which changes make up the each snapshot, and git stores those changes and keeps useful metadata about them.

You can think of it as a recording of your progress: you can rewind to start at the base document and play back each change you made, eventually arriving at your more recent version.

Each snapshot is called a ‘commit’.

:::

## Collaborating Branching {background-image="/figures/section-1-vc/version-control.png" background-size="6%" background-position="85% 6%"}

:::: columns

::: {.column width="50%"}
![](/figures/section-2-git/branching.png){fig-pos="t" fig-align="center"}
:::

::: {.column width="50%"}
::: {.incremental} 
 -   Multiple users: different people work on their own copy
 -   Each can branch off the original work independently

:::
:::

::::

::: notes
In this example, two users can make independent sets of changes on the same document.

Each can, on their own copy, head off on a different track and work on it independently while keeping the main copy intact.

When it's working...

:::

## Collaborating: Merging {background-image="/figures/section-1-vc/version-control.png" background-size="6%" background-position="85% 6%"}

::::: columns
::: {.column width="50%"}
::: {.incremental} 
-   Multiple users: different people work on their own copy
-   Compare and merge contributions from multiple people

:::
:::

::: {.column width="50%"}
![](/figures/section-2-git/collaborating.png){fig-pos="t" fig-align="center"}
:::

:::::

::: notes

the changes that work can be merged back into the original. If not, throw it out.

Documents/Repositories can be kept in sync across different computers facilitating collaboration among different people.

Unless multiple users make changes to the same section of the document (a conflict) you can incorporate two sets of changes into the same base document.

:::

## Version Control Repository {background-image="/figures/section-1-vc/version-control.png" background-size="6%" background-position="85% 6%"}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"

WES Project Folder
├── wes-analysis
  ├── data
  │ ├── wes-results
  │ │ ├── wes-results-2019.csv <– DON’T WORRY, THESE WON’T BECOME PUBLIC!
  │ │ ├── wes-results-2020.csv
  │ │ ├── wes-results-2021.csv
  │ | |── wes-results-2022.csv
  ├── doc
  ├── ref
  │ ├── references
  │ ├── images
  ├── plots
  ├── code
  ├── .git <———————— THIS MAKES IT A GIT REPOSITORY!
  ├── .gitignore <————– FILES listed here are ignored by git not tracked, e.g., csv files

```

::: notes
In version control systems, a repository is a data structure that stores metadata for a set of files or directory structure, as well as a historical record of changes to the to repository.

So You store all of your project files in a folder.

All of the files, plus the complete history for all the files in a that folder make up a repository (repo).

Using the WES analysis example above, you and your colleagues may choose to structure your version control project like this:

In this folder you'll see several subfolders
:::


## Version Control Repository {background-image="/figures/section-1-vc/version-control.png" background-size="6%" background-position="85% 6%"}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "9"

WES Project Folder
├── wes-analysis
  ├── data
  │ ├── wes-results
  │ │ ├── wes-results-2019.csv <– DON’T WORRY, THESE WON’T BECOME PUBLIC!
  │ │ ├── wes-results-2020.csv
  │ │ ├── wes-results-2021.csv
  │ | |── wes-results-2022.csv
  ├── doc
  ├── ref
  │ ├── references
  │ ├── images
  ├── plots
  ├── code
  ├── .git <———————— THIS MAKES IT A GIT REPOSITORY!
  ├── .gitignore <————– FILES listed here are ignored by git not tracked, e.g., csv files
```

::: notes
In version control systems, a repository is a data structure that stores metadata for a set of files or directory structure, as well as a historical record of changes to the to repository.

So You store all of your project files in a folder.

All of the files, plus the complete history for all the files in a that folder make up a repository (repo).

Using the WES analysis example above, you and your colleagues may choose to structure your version control project like this:

In this folder you'll see several subfolders
:::

## Section 2: Git 
:::: columns
::: {.column width="60%"}
<br>
<br>
![](/figures/section-2-git/git-logo.svg){fig-pos="t" fig-align="left" width="75%"}

:::

::: {.column width="40%"}

::: {.incremental} 
- Bullet 1
- Bullet 2
- Bullet 3
- Bullet 4
:::

:::

::::

::: notes
Git is

:::

## Git Jargon {background-image="/figures/section-1-vc/version-control.png" background-size="6%" background-position="85% 6%"}

::::: columns
::: {.column width="50%"}
Basic Commands

-   Repository (repo)
-   Stage/Add
-   Commit
-   Push
-   Pull
:::

::: {.column width="50%"}
Intermediate Commands

-   Clone
-   Branch
-   Fork

:::
:::::

::: notes
Stage/Add Usage: `git add [file/directory]` Definition: Moves changes (new files, modifications, or deletions) in your working directory to the staging area, preparing them to be included in the next commit. Purpose: Allows you to select which changes will be committed.

Commit Usage: `git commit m "message"` Definition: Records the changes in the staging area to the repository's history as a new snapshot. Each commit includes a unique ID and a descriptive message to explain the changes. Purpose: Saves a version of your work, making it easier to track and revert to if necessary.

Push Usage: `git push [remote] [branch]` Definition: Uploads your local commits to a remote repository (e.g., on GitHub, GitLab, or Bitbucket) so others can access them. Purpose: Synchronizes your work with the remote repository.

Pull Usage: `git pull [remote] [branch]` Definition: Fetches changes from a remote repository and integrates them into your local branch. This is a combination of git fetch (retrieve changes) and git merge (apply changes). Purpose: Ensures your local repository is up-to-date with the remote one.

Clone Usage: `git clone [repositoryurl]` Definition: Creates a copy of an existing remote repository on your local machine, including all files, branches, and commit history. Purpose: Allows you to work on a project locally by copying it from a remote source like GitHub.

Branch Usage: `git branch [branchname]` (to create a branch)\
`git checkout [branchname]` (to switch to a branch)\
`git switch [branchname]` (alternative to `checkout`) Definition: Represents an independent line of development within a repository. Branches allow you to work on new features or fixes without affecting the main project until changes are ready to be merged. Purpose: Facilitates parallel development and experimentation while keeping the main codebase stable.

Fork Command: No direct Git command; done via hosting services like GitHub. Definition: Creates a personal copy of someone else's repository in your own GitHub (or similar service) account. This is independent of the original repository, allowing you to make changes without affecting the source project. Purpose: Enables you to contribute to opensource projects or customize a repository for your own use while keeping the original repository intact. Contributions can be shared back via **pull requests**.

:::





## Hands-On Practice {background-image="/figures/section-2-git/git-logo.png" background-size="10%" background-position="85% 6%"}
<br>
<br>
<br>
<br>
Let's create our first repository!

## Review: Bash Jargon {background-image="/figures/section-2-git/git-logo.png" background-size="10%" background-position="85% 6%"}

``` {.bash eval="false"}
$ cd path/to/directory          # Go to specified directory - "quotes" are needed if there are spaces 
$ cd ..                         # Go up one directory level
$ mkdir new_directory           # Create specified directory
$ ls                            # List directories and files
$ ls -a                         # List directories and files, including hidden
```

::: notes
:::

## Review: Git Jargon {background-image="/figures/section-2-git/git-logo.png" background-size="10%" background-position="85% 6%"}

``` {.bash eval="false"}
#| class-output: output
$ git init                          # initiate a repository in the current directory
$ git status                        # indicate if there are any changes to files
$ git add <filename>                # add a new file/change to the staging area
$ git commit –m “commit message”    # commit all staged changes to the repository
$ git log                           # view commit history
$ git diff                          # show changes between commits
$ git restore                       # restore file/s to previous commit
```

## Review: Local Repository {background-image="/figures/section-2-git/git-logo.png" background-size="10%" background-position="85% 6%"}

![](/figures/section-2-git/local-repository.png){fig-pos="t" fig-align="center"}

::: notes
Repository is just “your” folder under version control. At this point, they may not have heard of staging area (see section 2.5)

:::

## Section 3: GitHub

:::: columns
::: {.column width="50%"}
![](/figures/section-3-github/github-mark.png){fig-pos="t" fig-align="center" width="250%"}

:::

::: {.column width="50%"}
<br>
<br>

::: {.incremental} 
-   Hosting service for git repositories
-   Greatly facilitates collaboration
- __Git:__ Version Control __+__
- __Hub:__ Centralized repos & networking/collaborating
:::

:::

::::

::: notes
GitHub is a platform that hosts Git repositories in the web and provides a web interface to interact with repos. Main Function is to host the 'remote' or main copy of a git repository (project)

:::


## Git + GitHub: Working Collaboratively {background-image="/figures/section-3-github/github-mark.png" background-size="8%" background-position="85% 5%"}

![](/figures/section-3-github/git-gh-collab2.png){fig-pos="t" fig-align="center"}

::: notes
Version control really comes into its own when we begin to collaborate with other people. We already have most of the machinery we need to do this; the only thing missing is to copy changes from one repository to another.

:::

## Remote Repository {background-image="/figures/section-3-github/github-mark.png" background-size="8%" background-position="85% 5%"}

![](/figures/section-3-github/remote-repository-final.png){fig-pos="t" fig-align="center"}

::: notes
Think of the remote as the “authoritative” version/source/copy

:::

## Hands-On Practice {background-image="/figures/section-3-github/github-mark.png" background-size="8%" background-position="85% 5%"}

<br>
<br>
<br>
<br>
Let's create our first remote repository!



::: notes
Let’s make our first repository 

:::

## A Collaborative Workflow {background-image="/figures/section-3-github/github-mark.png" background-size="8%" background-position="85% 5%"}

::::::::::::: columns
::::: {.column width="33%"}
:::: {.fragment fragment-index="1"}
::: {.fragment .highlight-current-blue fragment-index="1"}
Original Repository

\|── planets

\| \|──.git

\| \|── mars.txt

:::

::::

:::: {.fragment fragment-index="7"}
::: {.fragment .highlight-current-blue fragment-index="2"}
\| \|── pluto.txt

:::
::::
:::::

:::::: {.column width="33%"}
:::: {.fragment fragment-index="2"}
::: {.fragment .highlight-current-blue fragment-index="2"}
GitHub Repository

\|── planets

\| \|── .git

:::
::::

:::: {.fragment fragment-index="3"}
::: {.fragment .highlight-current-blue fragment-index="3"}
\| \|── mars.txt

:::
::::

:::: {.fragment fragment-index="6"}
::: {.fragment .highlight-current-blue fragment-index="6"}
\| \|── pluto.txt

:::
::::
::::::

::::: {.column width="33%"}
:::: {.fragment fragment-index="4"}
::: {.fragment .highlight-current-blue fragment-index="4"}
Cloned Repository

\|── planets

\| \|── .git

\| \|── mars.txt

:::
::::

:::: {.fragment fragment-index="5"}
::: {.fragment .highlight-current-blue fragment-index="5"}
\| \|── pluto.txt

:::
::::
:::::
:::::::::::::

<br> <br> <br>


:::::::: columns
:::::::: {style="font-size: 80%"}
:::::::: {style="line-height: 80%"}
:::::: {.column width="50%"}

:::: {.fragment fragment-index="1"}
::: {.fragment .highlight-current-blue fragment-index="1"}
1.  Initial repository set up

:::
::::

:::: {.fragment fragment-index="2"}
::: {.fragment .highlight-current-blue fragment-index="2"}
2.  Remote repository created & linked

:::
::::

:::: {.fragment fragment-index="3"}
::: {.fragment .highlight-current-blue fragment-index="3"}
3.  Local changes pushed to remote

:::
::::

:::: {.fragment fragment-index="4"}
::: {.fragment .highlight-current-blue fragment-index="4"}
4.  Remote repository cloned by collaborator

:::
::::

::::::

:::::: {.column width="50%"}
:::: {.fragment fragment-index="5"}
::: {.fragment .highlight-current-blue fragment-index="5"}
5.  Collaborator makes additions

:::
::::

:::: {.fragment fragment-index="6"}
::: {.fragment .highlight-current-blue fragment-index="6"}
6.  Collaborator updates remote with changes

:::
::::

:::: {.fragment fragment-index="7"}
::: {.fragment .highlight-current-blue fragment-index="7"}
7.  Collaborator changes pulled back to original

:::
::::
::::::
::::::::
::::::::
::::::::


## A Typical Workflow {background-image="/figures/section-3-github/github-mark.png" background-size="8%" background-position="85% 5%"}

The table below doubles as a handy cheatsheet; take a screenshot and save for future reference!

::: {style="font-size: 0.75em;"}

| Order         | Action         | Git Command                                   |
|------------------|------------------|------------------------------------|
| 1 (Once Only) | Create remote  | (Done on GitHub)                              |
| 2 (Once Only) | Clone remote   | `git clone https://github.com/path/to/remote` |
| 3             | Update local   | `git pull origin main`                        |
| 4             | Make changes   | (Done in editor)                              |
| 5             | Stage changes  | `git add numbers.txt`                         |
| 6             | Commit changes | `git commit -m "Add 100 to numbers.txt"`      |
| 7             | Update remote  | `git push origin main`                        |

:::

::: notes
To this point, we have learned a lot of different git commands and workflows involved in tracking all of our changes, keeping our repositories up-to-date, and collaborating across computers using GitHub. While there are multiple levels of nuance that go into each of these steps, let's lay out a typical workflow.

:::

## Ignoring things {background-image="/figures/section-3-github/github-mark.png" background-size="8%" background-position="85% 5%"}

:::::: columns
::::: {.column width="50%"}
::: {.fragment fragment-index="1"}
Original Repository

\|── planets

\| \|──.git

\| \|── mars.txt

\| \|── pluto.txt

:::

::: {.fragment .fade-up fragment-index="3"}
::: {.fragment .highlight-current-blue fragment-index="3"}
\| \|── data.csv

:::
:::

::: {.fragment .fade-up fragment-index="4"}
::: {.fragment .highlight-current-blue fragment-index="4"}
\| \|── .gitignore

:::
:::
:::::

::::: {.column width="50%"}

::: {.fragment .fade-left fragment-index="2"}
![](/figures/section-3-github/data2.png){fig-pos="t" fig-align="center" width="75%"}

:::

:::::
::::::

::: notes
Ignore data files! .gitignore

What if we have files that we do not want Git to track for us, like backup files created by our editor or intermediate files created during data analysis? This often is the case in BC Government data projects.

:::

## Section 4: BCGov GitHub Organization  {background-image="/figures/section-4-bcgov/bcgov-logo.png" background-size="8%" background-position="85% 6%" transition="fade-in fade-out" style="padding: 0px 0px 0px 0px;"}

![](/figures/section-4-bcgov/bcgov-org2.png)

::: {.absolute top=575 left=265}
::: {.fragment .fade-up fragment-index="1"}
::: {data-id="box2" auto-animate-delay="0.2" style="background:  #e83e8c ; width: 125px; height: 5px;"}
:::
:::
:::

::: footer
BCGov: [https://github.com/bcgov](https://github.com/bcgov)

:::


## BC Developer Guide {background-image="/figures/section-4-bcgov/bcgov-logo.png" background-size="8%" background-position="85% 6%" transition="fade-in fade-out"}
![](/figures/section-4-bcgov/bcgov-org-sign-up.png)

::: footer
BC Developer Guide: [https://developer.gov.bc.ca](https://developer.gov.bc.ca/docs/default/component/bc-developer-guide/use-github-in-bcgov/bc-government-organizations-in-github/#directions-to-sign-up-and-link-your-account-for-bcgov)

:::

## BCGov GitHub Organization {background-image="/figures/section-4-bcgov/bcgov-logo.png" background-size="8%" background-position="85% 6%" transition="fade-in slide-out" style="padding: 0px 0px 0px 0px;"}

![](/figures/section-4-bcgov/bcgov-org2.png)

::: {.absolute top=280 left=425}
::: {.fragment .fade-up fragment-index="2"}
::: {data-id="box2" auto-animate-delay="0.2" style="background:  #e83e8c ; width: 120px; height: 5px;"}
:::
:::
:::

::: footer
BCGov: [https://github.com/bcgov](https://github.com/bcgov)
:::

## BCGov GitHub Policy Framework {background-image="/figures/section-4-bcgov/bcgov-logo.png" background-size="8%" background-position="85% 6%" transition="fade-in fade-out"}
![](/figures/section-4-bcgov/bcgov-policy.png)

::: footer
BCGov Policy Framework: [https://github.com/bcgov/BC-Policy-Framework-For-GitHub](https://github.com/bcgov/BC-Policy-Framework-For-GitHub)

:::



## BCGov GitHub Policy Framework {background-image="/figures/section-4-bcgov/bcgov-logo.png" background-size="8%" background-position="85% 6%" transition="fade-in slide-out"}

::::: columns

:::: {.column width="70%"}
![](/figures/section-4-bcgov/bcgov-policy-scroll-readme.png)
::::

:::: {.column width="30%"}
::: {.incremental}
- Joining
- Opening & Contents of Repositories
- Licensing
- Privacy, Security, Copyright
- Appropriate Use
- How to’s
:::
::::

:::::


::: footer
BCGov Policy Framework: [https://github.com/bcgov/BC-Policy-Framework-For-GitHub](https://github.com/bcgov/BC-Policy-Framework-For-GitHub)

:::

## Mandatory Content {background-image="/figures/section-4-bcgov/bcgov-logo.png" background-size="8%" background-position="85% 6%" transition="fade-in slide-out"}
![](/figures/section-4-bcgov/all-the-files.png)

::: notes
3 Mandatory files:
LICENSE
README – what is in this project
Contributing – encourage government employees, public and members of the private sector are encouraged to contribute to the repository and how to do that


To foster a kind, inclusive, cooperative, and harassment-free open source BCGov community -> Optional Code-of-Conduct. 

Open Source space in general has had its struggles with conduct and one approach to improving  this is establishing clear code of conduct for open source projects. Most often this is a statement around fostering an open, safe, welcoming, and respectful inclusive community for all.

:::

## Credits

::: notes
version control icon: <a href="https://www.flaticon.com/free-icons/version-control" title="version control icons">Version control icons created by juicy_fish - Flaticon</a>

git logo: https://git-scm.com/downloads/logos

github logo: https://github.com/logos

:::
---
title: "Version Control using Git + GitHub"
subtitle: "BC Stats Workshop"
date: 01/29/2025
date-format: long
format:
    revealjs: 
        slide-number: true
        chalkboard: 
          buttons: false
        preview-links: auto
        #logo: images/quarto.png
        theme: [white, custom.scss]
---

## Why Version Control?

BC Stats has A LOT of source code that make:

::::: columns
::: {.column width="50%"}
-   aggregate / “tidy” data tables
-   figures/plots & maps
-   PDF reports
-   dashboards & applications
-   prediction models
-   provincial statistics
:::

::: {.column width="50%"}
![](/figures/code1.png){fig-pos="t"}
:::
:::::

::: footer
Photo source: [Programming Code](https://commons.wikimedia.org/wiki/File:Programming_code.jpg) © [Martin Vorel](https://commons.wikimedia.org/wiki/User:Bloxgros), [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0).
:::

::: notes
BC Stats has a lot of source code that make both final products and intermediate artifacts such clean tables of data. And the multitude of verisons and copies of scripts that we handle in a project can start to get overwhelming and messy. We can loose track of a change we made, or seek out creative ways to keep from losing track of our work as we share files around.
:::

## What is Version Control?

<br> <br> ![](/figures/git-logo.png){fig-pos="t" width="50%"}

![](/figures/git-circles.png){fig-pos="t"}

::: footer
Source: <https://git-scm.com/about>
:::

::: notes
A version control system is a tool that keeps track of changes for us. There are several options; we are going to talk about git. It keeps track of snapshots in time.

You decide which changes make up each sna+shot, and git stores those changes and keeps useful metadata about them. You store all of your project files in a folder. All of the files, plus the complete history for all the files in a that folder make up a repository (“repo”). Repositories can be kept in sync across different computers facilitating collaboration among different people.

From Git website: Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

Git is easy to learn and has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows.
:::

::: notes
:::

## A Collaborative Workflow {background-image="/figures/github-mark.png" background-size="10%" background-position="85% 6%"}

::::::::::::: columns
::::: {.column width="33%"}
:::: {.fragment fragment-index="1"}
::: {.fragment .highlight-current-blue fragment-index="1"}
Original Repository

\|── planets

\| \|──.git

\| \|── mars.txt
:::
::::

:::: {.fragment fragment-index="7"}
::: {.fragment .highlight-current-blue fragment-index="2"}
\| \|── pluto.txt
:::
::::
:::::

:::::: {.column width="33%"}
:::: {.fragment fragment-index="2"}
::: {.fragment .highlight-current-blue fragment-index="2"}
GitHub Repository

\|── planets

\| \|── .git
:::
::::

:::: {.fragment fragment-index="3"}
::: {.fragment .highlight-current-blue fragment-index="3"}
\| \|── mars.txt
:::
::::

:::: {.fragment fragment-index="6"}
::: {.fragment .highlight-current-blue fragment-index="6"}
\| \|── pluto.txt
:::
::::
::::::

::::: {.column width="33%"}
:::: {.fragment fragment-index="4"}
::: {.fragment .highlight-current-blue fragment-index="4"}
Cloned Repository

\|── planets

\| \|── .git

\| \|── mars.txt
:::
::::

:::: {.fragment fragment-index="5"}
::: {.fragment .highlight-current-blue fragment-index="5"}
\| \|── pluto.txt
:::
::::
:::::
:::::::::::::

<br> <br> <br>


::::::: columns
:::::::: {style="font-size: 80%"}
:::::::: {style="line-height: 80%"}
:::::: {.column width="50%"}

:::: {.fragment fragment-index="1"}
::: {.fragment .highlight-current-blue fragment-index="1"}
1.  Initial repository set up
:::
::::

:::: {.fragment fragment-index="2"}
::: {.fragment .highlight-current-blue fragment-index="2"}
2.  Remote repository created & linked
:::
::::

:::: {.fragment fragment-index="3"}
::: {.fragment .highlight-current-blue fragment-index="3"}
3.  Local changes pushed to remote
:::
::::

:::: {.fragment fragment-index="4"}
::: {.fragment .highlight-current-blue fragment-index="4"}
4.  Remote repository cloned by collaborator
:::
::::

::::::

:::::: {.column width="50%"}
:::: {.fragment fragment-index="5"}
::: {.fragment .highlight-current-blue fragment-index="5"}
5.  Collaborator makes additions
:::
::::

:::: {.fragment fragment-index="6"}
::: {.fragment .highlight-current-blue fragment-index="6"}
6.  Collaborator updates remote with changes
:::
::::

:::: {.fragment fragment-index="7"}
::: {.fragment .highlight-current-blue fragment-index="7"}
7.  Collaborator changes pulled back to original
:::
::::
::::::
::::::::
::::::::
:::::::



